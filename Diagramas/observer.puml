@startuml
hide circle
skinparam classAttributeIconSize 0
skinparam classNameBold true
skinparam monochrome true
skinparam roundCorner 8
skinparam defaultFontSize 13
skinparam classFontStyle Bold
skinparam defaultFontName Impact

class Redis {
     -config: Arc<Mutex<Config>>,
     -bdd: Arc<Mutex<BaseDeDatos>>,
     -siguiente_id: Token,
     +iniciar(&mut self): Result<(), RedisError>
}

class Observable {
    +notificar_observadores(&self, bdd: HashMap<String, Valor>);
    +agregar_observador(&mut self, o: Box<dyn Observer + Send>);
}

class Observer {
    +actualizar(&self, bdd: HashMap<String, Valor>);
}


class BaseDeDatos {
    -hashmap: HashMap<String, Valor>,
    -observadores: Vec<Observer>,
    +guardar_valor(&mut self, clave: String, valor: TipoRedis)
}

class PersistidorHandler {
    -archivo: String,
    -intervalo: Duration,
    -instante: Instant,
    -receptor: Receiver<MensajePersistencia>,
    +persistir(&mut self)
}

class Persistidor {
    -persistidor: Sender<MensajePersistencia>,
    +persistir(&self, base_de_datos: HashMap<String, Valor>)
    +cambiar_archivo(&self, ruta_nueva: String)
}

Observer <<Interface>>
Observable <<Abstract>>
Observable o-> Observer
BaseDeDatos -up-|> Observable
Persistidor .up.|> Observer
Persistidor -right-> PersistidorHandler: "Se comunica con"
Redis *-up-> BaseDeDatos
Redis .up.> Persistidor
Redis -right-> PersistidorHandler
@enduml
